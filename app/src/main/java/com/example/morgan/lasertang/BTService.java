package com.example.morgan.lasertang;import android.app.Service;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothSocket;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.os.Binder;import android.os.Bundle;import android.os.IBinder;import android.util.Log;import android.widget.ArrayAdapter;import android.widget.Toast;import java.io.IOException;import java.io.OutputStream;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.HashMap;import java.util.List;import java.util.Objects;import java.util.Set;public class BTService extends Service {    final static String newDevice = "new device";    final static String searchStarted = "searchStarted";    final static String searchStopped = "searchStopped";    final static String tankConnected = "tankConnected";    final static String tankDisconnected = "tankDisconnected";    private boolean BTenabled = false;    private boolean BTwasEnabled = false;    private boolean scaningForDevices = false;    final String LOG_TAG = "BTSERVICE";    String CurrentConnectedDevice;    BluetoothSocket clientSocket;    BluetoothAdapter bluetooth;    HashMap<String, String> BTdevices;    public BTService() {    }    @Override    public IBinder onBind(Intent intent) {        Log.d(LOG_TAG, "onBind");        return mBinder;    }    private final IBinder mBinder = new LocalBinder();    public class LocalBinder extends Binder {        BTService getServerInstance() {            return BTService.this;        }    }    public void onCreate() {        super.onCreate();        Log.d(LOG_TAG, "onCreate");        bluetooth = BluetoothAdapter.getDefaultAdapter();        if(bluetooth == null) {            return;        }        BTdevices = new HashMap<String, String>();        IntentFilter filter1 = new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED);        registerReceiver(BCR_ActionChange, filter1);        IntentFilter filter2 = new IntentFilter();        filter2.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);        filter2.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);        filter2.addAction(BluetoothAdapter.ACTION_SCAN_MODE_CHANGED);        filter2.addAction(BluetoothDevice.ACTION_FOUND);        filter2.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);        filter2.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);        registerReceiver(BCR_FoundDevice, filter2);    }    public void startBluetooth() {        if (!BTenabled) {            BTenabled = true;            Log.d(LOG_TAG, "SomeTask Function");            bluetooth = BluetoothAdapter.getDefaultAdapter();            Log.d(LOG_TAG, "LOG bluetooth.enable()");            if (bluetooth.isEnabled()) {                BTwasEnabled = true;                showPairedDevices();                scanForDevices();            } else {                BTwasEnabled = false;                Log.d(LOG_TAG, "START INTENT ACTION_REQUEST_ENABLE");                boolean btEn = bluetooth.enable();                Log.d(LOG_TAG, "bluetooth.enable()->"+btEn);            }        } else {            showPairedDevices();            scanForDevices();        }    }    public int onStartCommand(Intent intent, int flags, int startId) {        Log.d(LOG_TAG, "onStartCommand");        startBluetooth();        return super.onStartCommand(intent, flags, startId);    }    public void onDestroy() {        super.onDestroy();        if(!BTwasEnabled){            if(bluetooth.isEnabled()){                bluetooth.disable();            }        }        unregisterReceiver(BCR_ActionChange);        unregisterReceiver(BCR_FoundDevice);        Log.d(LOG_TAG, "onDestroy");    }    public boolean disconnect() {        if(clientSocket != null) {            if(clientSocket.isConnected()) {                try{                    clientSocket.close();                } catch (IOException e) {                    return false;                }            }        }        return true;    }    public boolean connect(String deviceName) {        Log.d(LOG_TAG, "connect(String deviceName)->" + deviceName);        try{            String address = BTdevices.get(deviceName);            Log.d(LOG_TAG, "connect address->" + address);            BluetoothDevice device = bluetooth.getRemoteDevice(address);            CurrentConnectedDevice = deviceName;            Method m = device.getClass().getMethod(                    "createRfcommSocket", new Class[] {int.class});            clientSocket = (BluetoothSocket) m.invoke(device, 1);            clientSocket.connect();        } catch (IOException e) {            Log.d(LOG_TAG + "IOException", e.getMessage());            return false;        } catch (SecurityException e) {            Log.d(LOG_TAG, e.getMessage() + "SecurityException");            return false;        } catch (NoSuchMethodException e) {            Log.d(LOG_TAG, e.getMessage() + "NoSuchMethodException");            return false;        } catch (IllegalArgumentException e) {            Log.d(LOG_TAG, e.getMessage() + "IllegalArgumentException");            return false;        } catch (IllegalAccessException e) {            Log.d(LOG_TAG, e.getMessage() + "IllegalAccessException");            return false;        } catch (InvocationTargetException e) {            Log.d(LOG_TAG, e.getMessage() + "InvocationTargetException");            return false;        }        return true;    }    public boolean isConnected() {        return !CurrentConnectedDevice.equals("");    }    private final BroadcastReceiver BCR_ActionChange = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            final String action = intent.getAction();            if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {                final int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR);                switch(state) {//                    case BluetoothAdapter.STATE_TURNING_OFF: break;//                    case BluetoothAdapter.STATE_TURNING_ON: break;                    case BluetoothAdapter.STATE_OFF:                        Log.d(LOG_TAG, "STATE_OFF");                        break;                    case BluetoothAdapter.STATE_ON:                        Log.d(LOG_TAG, "STATE_ON");                        showPairedDevices();                        boolean discovering = bluetooth.startDiscovery();                        Log.d(LOG_TAG, "bluetooth.startDiscovery()->"+discovering);                        break;                }            }        }    };    public void showPairedDevices() {        Log.d(LOG_TAG, "STATE_ON");        Set<BluetoothDevice> pairedDevices = bluetooth.getBondedDevices();        if (pairedDevices.size() > 0) {            for (BluetoothDevice device : pairedDevices) {                String BTdev = device.getName() + "\n" + device.getAddress();                Log.d(LOG_TAG, BTdev);                if (!BTdevices.containsKey(device.getName())) {                    BTdevices.put(device.getName(), device.getAddress());                    Intent intent = new Intent();                    intent.setAction(newDevice);                    intent.putExtra("NAME", device.getName());                    intent.putExtra("ADDRESS", device.getAddress());                    sendBroadcast(intent);                }            }        }    }    private final BroadcastReceiver BCR_FoundDevice = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            final String action = intent.getAction();            if (BluetoothDevice.ACTION_FOUND.equals(action)) {                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);                String name = device.getName();                if(name == null) {                    return;                }                String BTdev = device.getName() + "\n" + device.getAddress();//                Log.d(LOG_TAG, BTdev);                if (!BTdevices.containsKey(device.getName())) {                    BTdevices.put(device.getName(), device.getAddress());                    Intent foundDevice = new Intent();                    foundDevice.setAction(newDevice);                    foundDevice.putExtra("NAME", device.getName());                    foundDevice.putExtra("ADDRESS", device.getAddress());                    sendBroadcast(foundDevice);                }            }            if (BluetoothDevice.ACTION_ACL_CONNECTED.equals(action)) {                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);                String name = device.getName();                if (name.equals(CurrentConnectedDevice)) {                    Log.d(LOG_TAG, "ACTION_ACL_CONNECTED");                    Intent foundDevice = new Intent();                    foundDevice.setAction(tankConnected);                    foundDevice.putExtra("NAME", CurrentConnectedDevice);                    sendBroadcast(foundDevice);                }            }            if (BluetoothDevice.ACTION_ACL_DISCONNECTED.equals(action)) {                Log.d(LOG_TAG, "ACTION_ACL_DISCONNECTED");                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);                String name = device.getName();                if (name.equals(CurrentConnectedDevice)) {                    CurrentConnectedDevice = "";                    Intent foundDevice = new Intent();                    foundDevice.setAction(tankDisconnected);                    sendBroadcast(foundDevice);                }            }            if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {                Intent foundDevice = new Intent();                foundDevice.setAction(searchStopped);                sendBroadcast(foundDevice);            }            if (BluetoothAdapter.ACTION_DISCOVERY_STARTED.equals(action)) {                Intent foundDevice = new Intent();                foundDevice.setAction(searchStarted);                sendBroadcast(foundDevice);            }        }    };    public boolean scanForDevices() {        if (scaningForDevices) {            return false;        } else {            if (bluetooth.isEnabled()) {                boolean discovering = bluetooth.startDiscovery();                Log.d(LOG_TAG, "bluetooth.startDiscovery()->" + discovering);                return true;            } else {                return false;            }        }    }    public boolean sendCMD(byte cmd) {        Log.d(LOG_TAG, "sendCMD");        byte[] buf = {cmd};        return sendCMD(buf);    }    public boolean sendCMD(byte[] cmd) {        Log.d(LOG_TAG, "sendCMD");        try {            OutputStream outStream = clientSocket.getOutputStream();            outStream.write(cmd);            return true;        } catch (IOException e) {            Log.d("BLUETOOTH", e.getMessage());            return false;        }    }}