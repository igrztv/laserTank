package com.example.morgan.lasertang;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.ListView;import android.widget.SeekBar;import android.widget.Space;import android.widget.TextView;import android.widget.Toast;public class MainActivity extends AppCompatActivity implements View.OnClickListener, View.OnTouchListener {    // Tank Commands    private static final byte CMD_SHOOT = 0x01;    private static final byte CMD_MOVE = 0x02;    // Activity elements    ImageView moveBtn;    Button shootBtn;    String LOG = "MAIN_ACTIVITY_LOG";    BTDevicesReceiver newBTdevice;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        moveBtn = (ImageView) findViewById(R.id.move_btn);        shootBtn = (Button) findViewById(R.id.shoot_btn);        moveBtn.setOnClickListener(this);        shootBtn.setOnClickListener(this);        moveBtn.setOnTouchListener(this);        newBTdevice = new BTDevicesReceiver();        IntentFilter intentFilter = new IntentFilter();        intentFilter.addAction(BTService.tankDisconnected);        registerReceiver(newBTdevice, intentFilter);        // запуск bluetooth        startService(new Intent(this, BTService.class));    }    @Override    protected void onStart() {        super.onStart();        Log.d(LOG, "onStart");    }    @Override    protected void onStop() {        super.onStop();        Log.d(LOG, "onStop");    }    @Override    protected void onPause() {        super.onPause();        Log.d(LOG, "onPause");    }    @Override    protected void onResume() {        super.onResume();        Log.d(LOG, "onResume");    }    private class BTDevicesReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context arg0, Intent arg1) {            Log.d(LOG, "Sorry lost connection");        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        Log.d("myLogs", "requestCode = " + requestCode + ", resultCode = " + resultCode);        if (resultCode == RESULT_OK) {        } else {            Toast.makeText(this, "Wrong result", Toast.LENGTH_SHORT).show();        }    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(newBTdevice);    }    @Override    public void onClick(View v) {        if(v == shootBtn) {            byte[] bufToSend = {CMD_SHOOT, '\n'};//            sendCMD(bufToSend);        }    }    @Override    public boolean onTouch(View v, MotionEvent event) {        ImageView joystickSpace = (ImageView) findViewById(R.id.moveBtnSpace);        int action = event.getAction();        if( action == MotionEvent.ACTION_UP) {            v.setX(joystickSpace.getX() + joystickSpace.getWidth()/2 - v.getWidth()/2);            v.setY(joystickSpace.getY() + joystickSpace.getHeight()/2 - v.getHeight()/2);            return false;        }        int pointerIndex = 0;        MotionEvent.PointerCoords coords = new MotionEvent.PointerCoords();        event.getPointerCoords(pointerIndex, coords);        MotionEvent.PointerCoords cP = new MotionEvent.PointerCoords();        MotionEvent.PointerCoords cS = new MotionEvent.PointerCoords();        TextView tX = (TextView) findViewById(R.id.textView);        TextView tY = (TextView) findViewById(R.id.textView2);        float cR = v.getWidth() / 2;        float sR = joystickSpace.getWidth() / 2;        float cX = v.getX() - v.getWidth() / 2 + coords.x;        float cY = v.getY() - v.getHeight() / 2 + coords.y;        cP.x = cX + v.getWidth() / 2;        cP.y = cY + v.getHeight() / 2;        cS.x = joystickSpace.getX() + joystickSpace.getWidth() / 2;        cS.y = joystickSpace.getY() + joystickSpace.getHeight() / 2;//        if(    (cP.x - cS.x)*(cP.x - cS.x) + (cP.y - cS.y)*(cP.y - cS.y) < (sR-cR)*(sR-cR)      ) {//            v.setX(cX);//            v.setY(cY);//        }        if(cX >= joystickSpace.getX() && cX <= joystickSpace.getWidth() + joystickSpace.getX() - v.getWidth()) {            v.setX(cX);        }        if(cY >= joystickSpace.getY() && cY <= joystickSpace.getHeight() + joystickSpace.getY() - v.getHeight()) {            v.setY(cY);        }        tX.setText(cX + "");        tY.setText(cY + "");        // TODO: scale cX and cY to byte size        byte[] bufToSend = {CMD_MOVE, ':', (byte) cX, ',', (byte) cY, '\n'};        // sendCMD(bufToSend);        return true;    }}