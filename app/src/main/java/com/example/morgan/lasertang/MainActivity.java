package com.example.morgan.lasertang;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothSocket;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ListView;import android.widget.SeekBar;import android.widget.TextView;import android.widget.Toast;import java.io.IOException;import java.io.OutputStream;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.Set;public class MainActivity extends AppCompatActivity implements View.OnClickListener, View.OnTouchListener {    private static final int REQUEST_ENABLE_BT = 1;    // Tank Commands    private static final byte CMD_SHOOT = 0x01;    private static final byte CMD_MOVE = 0x02;    // Activity elements    Button moveBtn;    Button shootBtn;    SeekBar servo;    BluetoothSocket clientSocket;    private BroadcastReceiver mReceiver = null;    BluetoothAdapter bluetooth;    ArrayAdapter<String> itemsAdapter;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        itemsAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1);        moveBtn = (Button) findViewById(R.id.move_btn);        shootBtn = (Button) findViewById(R.id.shoot_btn);        ListView listView = (ListView) findViewById(R.id.listView);        listView.setAdapter(itemsAdapter);        servo = (SeekBar) findViewById(R.id.seekBar);        // BT.getInstance().init(getApplicationContext());        // BT b = BT.getInstance();        moveBtn.setOnClickListener(this);        shootBtn.setOnClickListener(this);        moveBtn.setOnTouchListener(this);        bluetooth = BluetoothAdapter.getDefaultAdapter();        if (!bluetooth.isEnabled()) {            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);        }        showBluetoothDevices();        // Register the BroadcastReceiver        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);        registerReceiver(mReceiver, filter); // Don't forget to unregister during onDestroy        try {            BluetoothDevice device = bluetooth.getRemoteDevice("20:15:02:11:26:45");            Method m = device.getClass().getMethod("createRfcommSocket", new Class[]{int.class});            clientSocket = (BluetoothSocket) m.invoke(device, 1);            clientSocket.connect();        } catch (IOException |                SecurityException |                IllegalArgumentException |                NoSuchMethodException |                InvocationTargetException |                IllegalAccessException e) {            Log.d("BLUETOOTH", e.getMessage());        }        // Toast.makeText(getApplicationContext(), "CONNECTED", Toast.LENGTH_LONG).show();    }    private void showBluetoothDevices() {        if (!bluetooth.isEnabled()) {            return;        }        Set<BluetoothDevice> pairedDevices = bluetooth.getBondedDevices();        // If there are paired devices        if (pairedDevices.size() > 0) {            // Loop through paired devices            for (BluetoothDevice device : pairedDevices) {                // Add the name and address to an array adapter to show in a ListView                itemsAdapter.add(device.getName() + "\n" + device.getAddress());            }        }        boolean discovering = bluetooth.startDiscovery();        if (!discovering) {            //Toast.makeText(getApplicationContext(), "CANNOT DISCOVER", Toast.LENGTH_LONG).show();        } else {            // Create a BroadcastReceiver for ACTION_FOUND            mReceiver = new BroadcastReceiver() {                public void onReceive(Context context, Intent intent) {                    String action = intent.getAction();                    // When discovery finds a device                    if (BluetoothDevice.ACTION_FOUND.equals(action)) {                        // Get the BluetoothDevice object from the Intent                        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);                        // Add the name and address to an array adapter to show in a ListView                        itemsAdapter.add(device.getName() + "\n" + device.getAddress());                    }                }            };        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        // запишем в лог значения requestCode и resultCode        Log.d("myLogs", "requestCode = " + requestCode + ", resultCode = " + resultCode);        // если пришло ОК        if (resultCode == RESULT_OK) {            // show list of BT devices            showBluetoothDevices();        } else {            Toast.makeText(this, "Wrong result", Toast.LENGTH_SHORT).show();        }    }    @Override    protected void onDestroy() {        super.onDestroy();        unregisterReceiver(mReceiver);    }    @Override    public void onClick(View v) {        if(v == shootBtn) {            byte[] bufToSend = {CMD_SHOOT, '\n'};            sendCMD(bufToSend);        }    }    private int mActivePointerId = -1;    @Override    public boolean onTouch(View v, MotionEvent event) {        int pointerIndex = 0;        MotionEvent.PointerCoords coords = new MotionEvent.PointerCoords();        event.getPointerCoords(pointerIndex, coords);        TextView tX = (TextView) findViewById(R.id.textView);        TextView tY = (TextView) findViewById(R.id.textView2);        float cX = v.getX() - v.getWidth() / 2 + coords.x;        float cY = v.getY() - v.getHeight() / 2 + coords.y;        v.setX(cX);        v.setY(cY);        tX.setText(cX + "");        tY.setText(cY + "");        // TODO: scale cX and cY to byte size        byte[] bufToSend = {CMD_MOVE, ':', (byte) cX, ',', (byte) cY, '\n'};        sendCMD(bufToSend);        return true;    }    private boolean sendCMD(byte cmd) {        byte[] buf = {cmd};        return sendCMD(buf);    }    private boolean sendCMD(byte[] cmd) {        try {            OutputStream outStream = clientSocket.getOutputStream();            outStream.write(cmd);            return true;        } catch (IOException e) {            Log.d("BLUETOOTH", e.getMessage());        }        return false;    }}